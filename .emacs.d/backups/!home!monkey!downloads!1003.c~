#include<stdio.h>
#include<string.h>


int main()
{
	int replace(char *source, char *s1,char *s2, int flag);
    int n,m;
	scanf("%d",&n);
	char a[200] ;
	char b[20] ;
	char c[20] ;
	scanf("%s%s%s",a,b,c);  
	
	m = replace(a,b,c,n); 

	printf("%d %s",m,a);  
    system("pause");
    return 0;
}


int replace(char *source, char *s1,char *s2, int flag)
{
	int i,j,k,l,n,m = 0;
    int a[200];     
	char c[200];  
	
	if (strlen(s1) == 0 || strlen(source) < strlen(s1)) 
		return 0;
    if (flag == 1)   //对大小写敏感的情况 
    {
		for(i = 0; i < strlen(source) - strlen(s1) + 1;i++)
        {  	
			for (j = 0;j < strlen(s1);j++)         //judge if there is a string in s1 same to one in source 
            {
				if(*(source + i + j) != *(s1 + j))	 	
					break;
			}
			if (j == strlen(s1))    //when find the string 
            {   
				a[m] = i;  //sign the number of the first character in source
				m++;    
			}
		} 
		for (i = 0;i < 200;i++) 
		   c[i] = *(source + i);  
		for (i = 0,k = 0,j = 0;i < 200;i++,j++)
        {   
			if (j == a[k])     
			{
               	for(l = 0; l < strlen(s2); l++,i++)   
					*(source + i) = *(s2 + l);
				i--;  //i 多加了一个，所以要减1 
                k++;  //转到source中下一个相同字符串的首字母位置 
				j = j + strlen(s1) - 1;  //因为按照大循环后面j要加1,所以这里先减1 
            }  
			else     
				 *(source + i) = c[j];  
		}
	}
	
    else if(flag == 0)  //对大小写不敏感的情况 
    {
		for(i = 0; i <= (strlen(source) - strlen(s1));i++)
        {
			for (j = 0;j < strlen(s1);j++)
            {
				if(*(source + i + j) != *(s1 + j) || (*(source + i + j) - *(s1 + j)) != 32 || (*(source + i + j) - *(s1 + j)) != -32)			
						break;
			}
			if (j == strlen(s1))
            {
				a[m] = i;
				m++;
			}
		} 
		for (i = 0;i < 200;i++)
			c[i] = *(source + i);
		for (i = 0,k = 0,j = 0;i < 200;i++,j++)
        {
			if (j == a[k])
			{
            	for(l = 0; l < strlen(s2); l++,i++)
					*(source + i) = *(s2 + l);
				i--;
				k++;
                j = j + strlen(s1) - 1;
            }    
			else 
				*(source + i) = c[j];
		}
	}
	return m;
}
