#+TITLE:     installing pintos
#+AUTHOR:    yuanhang zheng
#+EMAIL:     zhengyhn@gmail
#+DATE:      2013-02-13 Wed
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

pintos的开发环境用于类Unix系统，主要在GNU/Linux中测试，主要在Debian和Ubuntu
发行版本中测试，也在solaris上测试过。不支持任何版本的windows!
* 依赖
** 必须
- gcc.最好是版本4.0以上，3.3至3.9的应该可以工作。在80x86CPU中，gcc的命令为gcc，
而在其它CPU的系统中，命令可能为i386-elf-gcc，你可以通过gcc -v来查看版本号。
- GNU binutils.用到的工具主要有addr2line,ar,ld,objcopy,ranlib。你可以在终端
上敲上面的命令，看看有没有安装好这些工具，如果没有，则自行安装。如果不是80x86架构的
CPU，则可能前面要带上i386-elf-gcc前缀。
- Perl.最好是5.8以上版本，你可以通过perl -v来查看是否安装并查看版本号。
- GNU make.最好是3.8以上版本，你可以通过make -v来查看是否安装并查看版本号。
** 推荐
- qemu.最好是0.11以上版本。我的是1.2.1版本，最新版本已经有较大修改，如果安装了qemu
但是找不到qemu这个命令，则你用TAB补全来看看，我的是使用qemu-system-x86_64，可以通过
qemu-system-x86_64 -version来查看版本号。
如果你不安装qemu,可以安装bochs，但是速度慢得要死。
- GDB.用于调试，同样，如果不是80x86架构的CPU，则是i386-elf-gdb.
- X.使用X服务会让虚拟机更像物理机器，但是这不是必须的。（这是官方说法，我不知道是什么）
** 可选
- Texinfo，用于文档写作，导出PDF。
- TEX，用于文档写作，导出PDF。
- VMware Player，用于测试pintos的另一个虚拟机。
* 步骤
** 安装qemu,具体的安装方法不同的发行版本不同
- 如果你发现找不到qemu这个命令，而发现有qemu-system-x86_64之类的命令，
则要使用qemu-system-x86_64
** 安装src/utils中的一些脚本。把backtrace,pintos,pintos-gdb,pintos-mkdisk,
pintos-set-cmdline,Pintos.pm复制到环境变量路径中。
*** 什么是环境变量的路径？你在终端中打下面的命令就知道了：
#+BEGIN_SRC sh
echo $PATH
#+END_SRC
你会看见有一大串由冒号分隔开的路径，比如说我的是这样的：
#+BEGIN_EXAMPLE
/usr/bin:/usr/local/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin
:/opt/java/bin:/opt/java/db/bin:/opt/java/jre/bin:/usr/bin/core_perl
:/home/monkey/script
#+END_EXAMPLE
这些就是我们所说的环境变量的路径。
*** 这个路径的作用是什么？
你查看一下这些路径下的文件就会发现，比如：
#+BEGIN_SRC sh
ls /bin
#+END_SRC
你会看到ls,cp这些文件，也就是说，当我们在终端的任意目录下打ls这个命令时，它就会在
$PATH中的路径里面找ls这个程序，如果找到则调用这个脚本（程序），否则，提示：
#+BEGIN_EXAMPLE
command not found
#+END_EXAMPLE
我们要把backtrace等脚本复制到这些路径下，就是想在任何地方执行这些脚本。
*** 怎么做？
方法有很多，我提供下面的方法。
假设你的pintos/目录为{pintos}（我的是~/pintos）（~代表当前用户的主目录）
  1) 在pintos/下建立一个目录bin
#+BEGIN_SRC sh
cd {pintos}
mkdir bin
#+END_SRC
  2) 把这个目录加入$PATH中。用你喜欢的编辑器（vi/vim or emacs or gedit)打开
~/.bash_profile文件，在文件末尾添加下面一行：
#+BEGIN_EXAMPLE
export PATH=$PATH:{pintos}/bin
#+END_EXAMPLE
我的{pintos}为~/pintos，所以我添加下面一行：
#+BEGIN_EXAMPLE
export PATH=$PATH:~/pintos/bin
#+END_EXAMPLE
注意，等号两边不要加空格。
  3) 使新加进去的环境变量路径生效。通过下面的命令：
#+BEGIN_SRC sh
. ~/.bash_profile
#+END_SRC
或者
#+BEGIN_SRC sh
source ~/.bash_profile
#+END_SRC
  4) 把backtrace等脚本复制到该路径下：
#+BEGIN_SRC sh
cd {pintos}/src/utils/
cp backtrace pintos-gdb pintos-set-cmdline pintos-mkdisk 
pintos Pintos.pm {pintos}/bin
#+END_SRC
** 安装src/misc/gdb-macros到一个公共目录。
用你喜欢的编辑器打开{pintos}/bin/pintos-gdb，找到GDBMACROS这个变量(大概在第4行)，
把它的值改为：{pintos}/src/misc/gdb-macros,比如我的改为了：
#+BEGIN_EXAMPLE
GDBMACROS=~/pintos/src/misc/gdb-macros
#+END_EXAMPLE
测试一下，敲下面的命令：
#+BEGIN_SRC sh
pintos-gdb
#+END_SRC
如果没有提示找不到gdb-macros，则这一步成功了（你会发现进入了GDB，按ctrl + d退出）。
** 安装utils中的其它部分。
  - 进入src/util中编译
#+BEGIN_SRC sh
cd {pintos}/src/utils/
make
#+END_SRC
  - 把squish-pty放进$PATH中
#+BEGIN_SRC sh
cp {pintos}/src/utils/squish-pty {pintos}/bin
#+END_SRC
  - 如果要支持VMware player,则要把squish-unix也放进去。
  - 如果perl的版本低于5.80，则要把setitimer-helper放进去。
** 修改pintos脚本
用编辑器打开{pintos}/bin/pintos脚本
- 在103行左右，你会看到有下面一行：
#+BEGIN_SRC sh
$sim = "bochs" if !defined $sim;
#+END_SRC
把bochs改成qemu
- 在129行左右，你会看到下面几行：
#+BEGIN_SRC sh
Simulator selection:
  --bochs                  (default) Use Bochs as simulator
  --qemu                   Use QEMU as simulator
  --player                 Use VMware Player as simulator
#+END_SRC
你得改变bochs和qemu的顺序，变成这样：
#+BEGIN_SRC sh
Simulator selection:
  --qemu                   Use QEMU as simulator
  --bochs                  (default) Use Bochs as simulator
  --player                 Use VMware Player as simulator
#+END_SRC
- 在623行左右，你会发现，有下面一行：
#+BEGIN_SRC sh
push (@cmd, '-no-kqemu');
#+END_SRC
把这一行注释掉，变成这样：
#+BEGIN_SRC sh
#push (@cmd, '-no-kqemu');
#+END_SRC

** 测试是否成功
#+BEGIN_SRC sh
cd {pintos}/src/threads
make
cd build
pintos run alarm-multiple
#+END_SRC
如果没有异常，则表示安装成功！
